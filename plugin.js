var fs   = Npm.require('fs');
var less = Npm.require('less');

var LESS_INDEX_FILE_PATH = "client/stylesheets/app.index.less";

var generatedMessage = [
  "// This file is auto generated by the ordered-less package",
  "// New .less files will be automatically '@import'ed  at the bottom",
  "// Existing .less imports will not be touch",
  "// When deleting a .less file you must manually delete it from here",
  "",
  ""
]

generatedMessage = generatedMessage.join("\n");

// Put any files through the Less compiler that end in lessindex
Plugin.registerSourceHandler("index.less", {archMatching: 'web'}, function (compileStep) {
  var source = compileStep.read().toString('utf8');

  var options = {
    syncImport: true,
    // @imports only work relative to the project root
    paths: []
  }

  less.render(source, options, function(error, output) {
    if (error) {
      compileStep.error({
        message: "Less compiler error: " + error.message,
        sourcePath: error.filename || compileStep.inputPath,
        line: error.line,
        column: error.column
      });
    } else {
      compileStep.addStylesheet({
        path: compileStep.inputPath + ".css",
        data: output.css,
        sourceMap: output.map
      });
    }
  });

});

// Trigger when new Less files are created
Plugin.registerSourceHandler("less", {archMatching: 'web'}, function (compileStep) {
  if ( fs.existsSync(LESS_INDEX_FILE_PATH) ) {
    var lessIndex = fs.readFileSync(LESS_INDEX_FILE_PATH, 'utf8');
    if (lessIndex.indexOf(compileStep.inputPath) == -1) {
      fs.appendFileSync(LESS_INDEX_FILE_PATH, '\n@import "' + compileStep.inputPath + '";', 'utf8')
    }  
  } else {
    var newFile = generatedMessage + '@import "' + compileStep.inputPath + '";\n';
    fs.writeFileSync(LESS_INDEX_FILE_PATH, newFile, 'utf8')
  }
});